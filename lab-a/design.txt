class Maze:
    def __init__(self, file):
        self.maze = two_dimension_array
        construct_maze(file)
        
    def construct_maze(file):
        lines_list = file.readlines()
        lines_num = len(lines_list)
        
        for i in range(lines_num): #turn it into indexes 
            line = lines_list[i]
            for j in range(len(line.split())
                if line[j] == '%':
                    self.maze[i, j] = 1 #1 means there's a wall
                else:
                    self.maze[i, j] = 0 #0 means there's no wall
                           
    def print_maze(self):
        print()

class State:
    def __init__(self, file): #construct the initial state 
        self.mouse_loc = (0, 1) # (row, col)
        self.cheese_loc = [(1, 2), (2, 4)] #?
        self.maze = Maze(file) #do we need to keep track of the maze since it's unchanged!
        
    def update_mouse_loc(self, new_mouse_loc):
        self.mouse_loc = new_mouse_loc
        

def transition_model(state, action):
    if action == 'North' and state.maze[mouse_loc][4] == 0: 
    #no wall at the south side of the square above
        state.mouse_loc[0] += 1
        
    ...
        
    try:
        state.cheese_loc.remove(mouse_loc)
    except Error:
        pass 
        
    if cheese_loc == []: #goal test: check if there's no cheese left #make it a separate function 
        return 
                           
def multi_heuristic(node, state): #mahattan distance to the farthest prize 
    farthest = single_heuristic(node, state.get_cheese_loc[0])
    for cheese in state.get_cheese_loc:
        dis_to_cheese = single_heuristic(node, cheese)
        if dis_to_cheese > farthest:
            farthest = dis_to_cheese
    return farthest
            
#possible deepcopy issue 
#use pycharm for debugging 
            
        

        

        
    